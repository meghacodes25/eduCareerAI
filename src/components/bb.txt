// "use client";

// import { useState, useEffect } from "react";
// import { Users, MessageSquare, Wallet, ExternalLink, Loader2 } from "lucide-react";
// import { PaymanClient } from "@paymanai/payman-ts";

// // Types
// interface Mentor {
//   id: number;
//   name: string;
//   role: string;
//   company: string;
//   rate: number;
//   availability: "Available" | "Booked";
//   walletAddress: string;
//   image: string;
// }

// // Constants
// const payman = PaymanClient.withCredentials({
//   clientId: process.env.NEXT_PUBLIC_PAYMAN_CLIENT_ID!,
//   clientSecret: process.env.NEXT_PUBLIC_PAYMAN_CLIENT_SECRET!,
// });

// export default function MentorList({ careerPath }: { careerPath: string }) {
//   // State
//   const [selectedMentor, setSelectedMentor] = useState<Mentor | null>(null);
//   const [isPaying, setIsPaying] = useState(false);
//   const [txHash, setTxHash] = useState<string | null>(null);
//   const [showToast, setShowToast] = useState(false);
//   const [toastMessage, setToastMessage] = useState({
//     title: "",
//     message: "",
//     type: "success",
//   });
//   const [mentors, setMentors] = useState<Mentor[]>([]);

//   // Toast helper
//   const showNotification = (title: string, message: string, type: "success" | "error") => {
//     setToastMessage({ title, message, type });
//     setShowToast(true);
//     setTimeout(() => setShowToast(false), 5000);
//   };

//   // Fetch payees from Payman
//   useEffect(() => {
//     const fetchPayees = async () => {
//       try {
//         const response = await payman.ask("List all payees");
//         console.log("Raw Payees Response:", response);

//         // Extract the artifacts array and parse the content property
//         const artifacts = response?.artifacts || [];
//         if (!artifacts.length || !artifacts[0]?.content) {
//           console.warn("Artifacts array is empty or content is missing:", artifacts);
//           return;
//         }

//         const payeesContent = artifacts[0]?.content;

//         let parsedPayees = [];
//         if (payeesContent) {
//           try {
//             // Attempt to parse as JSON
//             parsedPayees = JSON.parse(payeesContent);
//           } catch (parseError) {
//             console.error("Error parsing payees content as JSON:", parseError);
//             console.log("Payees Content:", payeesContent);

//             // Fallback: Parse plain text response
//             const payeeRegex = /\*\*(.*?)\*\*.*?- Type: (.*?)\n.*?- Currency: (.*?)\n.*?- Status: (.*?)\n/g;
//             let match;
//             while ((match = payeeRegex.exec(payeesContent)) !== null) {
//               parsedPayees.push({
//                 id: match[1],
//                 name: match[1],
//                 role: match[2],
//                 company: match[3],
//                 rate: 0.0002, // Default rate
//                 availability: match[4] === "Active" ? "Available" : "Unavailable",
//                 walletAddress: "",
//                 image: "/placeholder.svg",
//               });
//             }
//           }
//         }

//         console.log("Parsed Payees:", parsedPayees);

//         // Map the parsed payees to the mentors state
//         setMentors(parsedPayees);
//       } catch (error: any) {
//         console.error("Error fetching or parsing payees:", error);
//         if (error.response && error.response.status === 401) {
//           showNotification("Authentication Error", "Invalid credentials. Please check your API keys.", "error");
//         } else {
//           showNotification("Error", "Failed to fetch payees. Please try again later.", "error");
//         }
//       }
//     };

//     fetchPayees();
//   }, []);

//   // Payment handling
//   const handlePayment = async (mentor: Mentor) => {
//     setIsPaying(true);
//     setTxHash(null);

//     try {
//       const response = await payman.ask(`Send $${mentor.rate} to ${mentor.name}`);
//       console.log("Payment Response:", response);

//       // Update mentor's availability to "Booked"
//       setMentors((prevMentors) =>
//         prevMentors.map((m) =>
//           m.id === mentor.id ? { ...m, availability: "Booked" } : m
//         )
//       );

//       showNotification("Payment Successful", "Your booking has been confirmed!", "success");
//       setSelectedMentor(null);
//     } catch (error) {
//       console.error("Payment Error:", error);
//       showNotification("Payment Failed", "Transaction could not be completed. Please try again.", "error");
//     } finally {
//       setIsPaying(false);
//     }
//   };

//   return (
//     <div className="w-full max-w-4xl mx-auto bg-white rounded-xl shadow-lg">
//       {/* Header */}
//       <div className="flex items-center justify-between p-6 border-b">
//         <div className="flex items-center gap-2">
//           <Users className="h-6 w-6 text-blue-600" />
//           <h2 className="text-xl font-bold">Available Mentors</h2>
//         </div>
//       </div>

//       {/* Mentor List */}
//       <div className="p-6 space-y-6">
//         {mentors.map((mentor) => (
//           <div
//             key={mentor.id}
//             className="flex items-start gap-4 rounded-lg border p-4 transition-colors hover:border-blue-100"
//           >
//             <img src={mentor.image || "/placeholder.svg"} alt={mentor.name} className="h-12 w-12 rounded-full" />
//             <div className="flex-1 space-y-1">
//               <div className="flex items-center justify-between">
//                 <div>
//                   <h3 className="font-semibold">{mentor.name}</h3>
//                   <p className="text-sm text-gray-600">
//                     {mentor.role} - {mentor.company}
//                   </p>
//                 </div>
//               </div>
//               <div className="flex items-center justify-between pt-2">
//                 <span className="text-sm font-medium">{mentor.rate} TDS/hour</span>
//                 <button
//                   onClick={() => setSelectedMentor(mentor)}
//                   disabled={mentor.availability !== "Available"}
//                   className="flex items-center gap-2 px-3 py-1.5 text-sm rounded-lg bg-blue-600 text-white hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
//                 >
//                   <MessageSquare className="h-4 w-4" />
//                   Book Session
//                 </button>
//               </div>
//             </div>
//           </div>
//         ))}
//       </div>

//       {/* Payment Modal */}
//       {selectedMentor && (
//         <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
//           <div className="bg-white rounded-xl shadow-lg max-w-md w-full p-6">
//             <h3 className="text-xl font-bold mb-4">Confirm Booking</h3>
//             <p className="text-gray-600 mb-6">You're about to book a mentoring session</p>

//             <div className="space-y-4">
//               <div className="flex items-center gap-4 rounded-lg border p-4">
//                 <img
//                   src={selectedMentor.image || "/placeholder.svg"}
//                   alt={selectedMentor.name}
//                   className="h-12 w-12 rounded-full"
//                 />
//                 <div>
//                   <h3 className="font-semibold">{selectedMentor.name}</h3>
//                   <p className="text-sm text-gray-600">
//                     {selectedMentor.role} at {selectedMentor.company}
//                   </p>
//                 </div>
//               </div>

//               <div className="rounded-lg border p-4">
//                 <div className="flex justify-between text-sm">
//                   <span>Session Rate</span>
//                   <span className="font-medium">{selectedMentor.rate} USD</span>
//                 </div>
//               </div>

//               {txHash && (
//                 <div className="rounded-lg bg-blue-50 p-4 text-sm">
//                   <div className="flex items-center gap-2">
//                     <span>Transaction submitted:</span>
//                     <a
//                       href={`https://paymanai.com/transactions/${txHash}`}
//                       target="_blank"
//                       rel="noopener noreferrer"
//                       className="flex items-center gap-1 text-blue-600 hover:underline"
//                     >
//                       View on Explorer
//                       <ExternalLink className="h-3 w-3" />
//                     </a>
//                   </div>
//                 </div>
//               )}

//               <div className="flex justify-end gap-2 pt-4">
//                 <button
//                   onClick={() => setSelectedMentor(null)}
//                   disabled={isPaying}
//                   className="px-4 py-2 rounded-lg border hover:bg-gray-50 disabled:opacity-50"
//                 >
//                   Cancel
//                 </button>
//                 <button
//                   onClick={() => handlePayment(selectedMentor)}
//                   disabled={isPaying}
//                   className="min-w-[100px] px-4 py-2 rounded-lg bg-blue-600 text-white hover:bg-blue-700 disabled:opacity-50 flex items-center justify-center gap-2"
//                 >
//                   {isPaying ? (
//                     <>
//                       <Loader2 className="h-4 w-4 animate-spin" />
//                       Processing
//                     </>
//                   ) : (
//                     "Confirm & Pay"
//                   )}
//                 </button>
//               </div>
//             </div>
//           </div>
//         </div>
//       )}

//       {/* Toast Notification */}
//       {showToast && (
//         <div
//           className={`fixed bottom-4 right-4 max-w-md w-full rounded-lg shadow-lg p-4 transition-all transform translate-y-0 ${
//             toastMessage.type === "success" ? "bg-green-50" : "bg-red-50"
//           }`}
//         >
//           <div className="flex gap-2">
//             <div className="flex-1">
//               <h4 className={`font-medium ${toastMessage.type === "success" ? "text-green-800" : "text-red-800"}`}>
//                 {toastMessage.title}
//               </h4>
//               <p className={toastMessage.type === "success" ? "text-green-600" : "text-red-600"}>
//                 {toastMessage.message}
//               </p>
//             </div>
//             <button onClick={() => setShowToast(false)} className="text-gray-500 hover:text-gray-700">
//               ×
//             </button>
//           </div>
//         </div>
//       )}
//     </div>
//   );
// }

